% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_imports.R
\name{add_imports}
\alias{add_imports}
\title{Import Packages & Functions}
\usage{
add_imports(..., options = NULL, pos = 1, envir = as.environment(pos))
}
\arguments{
\item{options}{A list of named arguments to pass to
\code{\link[utils]{install.packages}}.}

\item{pos}{Where to do the assignment.}

\item{envir}{The \code{\link[base]{environment}} to use.}

\item{\ldots}{Python style commands for importing packages and functions.}
}
\description{
Import packages & functions Python style.  Use the forms \code{import PACKAGE},
\code{import PACKAGE as ALIAS}, or \code{from PACKAGE import FUN1, FUN2, FUN_N}.
Note that if a package is not installed \code{add_imports} will attempt to
install from CRAN.  The \code{from PACKAGE import FUN1, FUN2, FUN_N} even
allows importing non-exported functions into the global environment.
}
\examples{
\dontrun{
add_imports('import lattice as lat')
lat::xyplot
get_imports()

file_ext
add_imports('from lattice import xyplot, qq')
file_ext
get_imports_functions()

## Removing packages and functions
get_imports()
get_imports_functions()
clear_imports()
get_imports()
get_imports_functions()
lat::xyplot
file_ext

## Options
add_imports(list(repos = "http://cran.us.r-project.org"),
  'import dplyr as dp', 'import ggplot2 as gg'
)
clear_imports()

## Mutli-line
add_imports('

import dplyr as dp
import ggplot2 as gg
import tidyr
from plyr import l_ply, rbind.fill

')

l_ply
dp::arrange
dp:::wrap

clear_imports()
}
}
\seealso{
\code{\link[utils]{install.packages}}
}

